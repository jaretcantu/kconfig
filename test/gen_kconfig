#!/usr/bin/perl

use constant { DEBUG => 0 };

my @random_list; # global
my $testinput;
my $seed = time;
my $cmdline = join(' ', $0, @ARGV);

while (@ARGV) {
	my $a = shift @ARGV;

	if($a eq '-s' || $a eq '--seed') {
		$seed = shift @ARGV;
	} elsif (defined($testinput) || $a =~ /^-/) {
		die "Unrecognized option '$a'";
	} else {
		open($testinput, $a) || die "Could not open file '$a'";
	}
}

$testinput = STDIN unless defined $testinput;
srand $seed;

sub parse_numeric_single($) {
	my($expr) = @_;
	$expr=~ s/\^/shift(@random_list)/eg;
	print "Expr: $expr\n" if DEBUG;
	return eval($expr);
}

sub parse_numeric($) {
	my($expr) = @_;
	print "ParseNumeric $expr\n" if DEBUG;
	if ($expr =~ /~/) {
		my @halves = split(/~/, $expr);
		my $r1 = parse_numeric_single($halves[0]);
		my $r2 = parse_numeric_single($halves[1]);
		my $r = $r1 + int(rand($r2-$r1+1));
		push @random_list, $r;
		print "Rando: $r1~$r2 = $r\n" if DEBUG;
		return $r;
	} else {
		return parse_numeric_single($expr);
	}
}

print "# Kconfig comparison operation test\n";
print "#  generated on ", `date`;
print "#  with random seed $seed\n";
print "#  and command:\n";
print "#   $cmdline\n";
print "\n";

while (<$testinput>) {
	chop;

	if ($_ eq '') {
		print "\n";
		next;
	}
	if (/^#/) {
		if (/^#(#.*$)/) { # double-hash = doc comment
			print $1, "\n";
		}
		next;
	}

	s/#.*$//; # strip comments

	if (!/^[yYnN]\s/) {
		print "#ERROR: $_\n";
		next;
	}

	@random_list = ();

	my $kconfig = $_; # pristine copy of expression

	s/%\{(.+?)\}/parse_numeric($1)/eg;

	my $expr = substr($_, 2);
	$expr=~ s/(^| )([0-9]\S+)($| )/$1"$2"$3/g; # quote version tokens

	s/^(.)/uc($1)/e; # already checked to be Y or N

	s/[()]/_I_/g;

	s/<=/_LE_/g;
	s/>=/_GE_/g;
	s/</_LT_/g;
	s/>/_GT_/g;

	s/&&/_AND_/g;
	s/\|\|/_OR_/g;

	s/[\s._-]+/_/g;
	s/_+$//; # trim trailing underscores

	print "config $_\n";
	print "\tbool\n";
	print "\tdefault $expr\n";
}
